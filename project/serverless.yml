service: dynamodb-aggreation-pipeline

frameworkVersion: '3'

provider:
  name: aws
  stackTags:
    product: job-topic-model
    env: qa
    created-date: 2022-04-26
    team: python-dev
    customer-impact: false
    terraform: false

useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-python-requirements


custom:
  pythonRequirements:
    layer:
      name: python-pynamodb
      description: "Layer which contains PynamoDB"
      compatibleRuntimes:
        - python3.7



functions:
  lambda:
    handler: lambda_function.lambda_handler
    environment:

      DEV_AWS_ACCESS_KEY: ${env:AWS_ACCESS_KEY}
      DEV_AWS_SECRET_KEY: ${env:AWS_SECRET_KEY}
      DEV_AWS_REGION_NAME: ${env:DEV_AWS_REGION_NAME}
      ENV: 'dev'

    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - KinesisDataStreams
              - Arn

  dynamodbstats:
    handler: handler.stats
    timeout: 300 # seconds
    reservedConcurrency: 500
    environment:
      AWS_ACCESS_KEY: ${env:AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${env:AWS_SECRET_KEY}
      TABLE_NAME_STATS: ${env:TABLE_NAME_STATS}
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn


resources:

  Resources:

    KinesisDataStreams:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${env:StreamName}
        RetentionPeriodHours: ${env:RetentionPeriodHours}
        StreamModeDetails:
          StreamMode: ON_DEMAND

    myTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: user_post_gsi
            AttributeType: S
          - AttributeName: post_users_comments_gsi
            AttributeType: S
          - AttributeName: post_user_likes_gsi
            AttributeType: S
        KinesisStreamSpecification:
          StreamArn: !GetAtt KinesisDataStreams.Arn
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableClass: STANDARD
        GlobalSecondaryIndexes:
          - IndexName: "user_post_gsi-view"
            KeySchema:
              - AttributeName: "user_post_gsi"
                KeyType: "HASH"
            Projection:
              ProjectionType: ALL
          - IndexName: "post_users_comments_gsi-view"
            KeySchema:
              - AttributeName: "post_users_comments_gsi"
                KeyType: "HASH"
            Projection:
              ProjectionType: ALL
          - IndexName: "post_user_likes_gsi-view"
            KeySchema:
              - AttributeName: "post_user_likes_gsi"
                KeyType: "HASH"
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: false

    statsdynamodb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:TABLE_NAME_STATS}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S

        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableClass: STANDARD
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: false

    MyQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:NAME_SOURCE_QUEUE}
        VisibilityTimeout : 500
        MessageRetentionPeriod: 1209600
        MaximumMessageSize: 262144
        ReceiveMessageWaitTimeSeconds: 2
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
          maxReceiveCount: 5

    MyDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:NAME_DLQ_QUEUE}
